(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{456:function(n,e,t){"use strict";t.r(e);var a=t(1),i=function(n){n.options.__data__block__={presentation_1a96284b:'\n\x3c!-- .slide: data-transition="slide" --\x3e\n\n## Slide Demo\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nA simple slide demo and useful hints.\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n> By Mr.Hope. Please scroll mousewheel down to the next slide\n\n---\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Marking Slides\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n[ðŸ‘‡](#/1/1)\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Marking Slides\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nUse `---` to mark horizontal slides\n\n\x3c!-- .element: class="fragment fade-in" --\x3e\n\nUse `--` to sperate vertical slides in a horizontal slide.\n\n\x3c!-- .element: class="fragment fade-in" --\x3e\n\nUse `\x3c!-- .slide: ... --\x3e` to add attributes to slide\n\n\x3c!-- .element: class="fragment fade-in" --\x3e\n\nUse `\x3c!-- .element: ... --\x3e` to add attributes to the previous HTML element\n\n\x3c!-- .element: class="fragment fade-in" --\x3e\n\n---\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Markdown\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nYou can use all kinds of markup in slides.\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Markdown\n\nYou can use all kinds of markup in slides.\n\n### This is a H3\n\nHeadings will transform to UPPERCASE by default.\n\nHere is paragraph with some **bold**, _italic_, ~~strikethrough~~ text and a [link](https://mrhope.site), and it can auto break itself so you dont need to worry the length.\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Markdown\n\nYou can use all kinds of markup in slides.\n\nList is `inline-block` by default.\n\n- Item\n- Item\n- Item\n\n1. Item 1\n1. Item 2\n1. Item 3\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Markdown\n\nYou can use all kinds of markup in slides.\n\nCode block will get auto highlight if you enable `highlight` plugin.\n\n```js\nconst a = 1;\n```\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Markdown\n\nYou can use all kinds of markup in slides.\n\nYou can also write math equation using tex syntax if you enable `math` plugin.\n\n$$\nJ(\\theta_0,\\theta_1) = \\sum_{i=0}\n$$\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Markdown\n\nYou can use all kinds of markup in slides.\n\nâš **Note**: Table, hr and other unstandard Markdown syntax is not supported.\n\n---\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Layout\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n--\n\n\x3c!-- .slide: data-auto-animate  --\x3e\n\n## Layout\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nðŸ‘† The `r-fit-text` class makes text as large as possible without overflowing the slide.\n\n--\n\n\x3c!-- .slide: data-auto-animate  --\x3e\n\n## Layout\n\n![Logo](/logo.svg)\n\n\x3c!-- .element: class="r-stretch" --\x3e\n\nðŸ‘† The `r-stretch` class helper lets you resize an element, like an image or video, to cover the remaining vertical space in a slide.\n\n--\n\n\x3c!-- .slide: data-auto-animate data-background-color="rgb(70, 70, 255)" --\x3e\n\n## Layout\n\n### Background\n\nCutom background by adding `data-background` attribute to slide.\n\n---\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nFragments are used to highlight or incrementally reveal individual elements on a slide.\n\nAdd `fragment` and animation class to element.\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n### Animation class\n\n- `fade-in`\n\x3c!-- .element: class="fragment fade-in" --\x3e\n\n- `fade-out`\n\x3c!-- .element: class="fragment fade-out" --\x3e\n\n- `fade-up`\n\x3c!-- .element: class="fragment fade-up" --\x3e\n\n\x3c!-- list break --\x3e\n\n- `fade-down`\n\x3c!-- .element: class="fragment fade-down" --\x3e\n\n- `fade-left`\n\x3c!-- .element: class="fragment fade-left" --\x3e\n\n- `fade-right`\n\x3c!-- .element: class="fragment fade-right" --\x3e\n\n\x3c!-- list break --\x3e\n\n- `fade-in-then-out`\n\x3c!-- .element: class="fragment fade-in-then-out" --\x3e\n\n- `fade-in-then-semi-out`\n\x3c!-- .element: class="fragment fade-in-then-semi-out" --\x3e\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n### Animation class\n\n- `grow`\n\x3c!-- .element: class="fragment grow" --\x3e\n\n- `shrink`\n\x3c!-- .element: class="fragment shrink" --\x3e\n\n- `strike`\n\x3c!-- .element: class="fragment strike" --\x3e\n\n\x3c!-- list break --\x3e\n\n- `highlight-red`\n\x3c!-- .element: class="fragment highlight-red" --\x3e\n\n- `highlight-green`\n\x3c!-- .element: class="fragment highlight-green" --\x3e\n\n- `highlight-blue`\n\x3c!-- .element: class="fragment highlight-blue" --\x3e\n\n\x3c!-- list break --\x3e\n\n- `highlight-current-red`\n\x3c!-- .element: class="fragment highlight-current-red" --\x3e\n\n- `highlight-current-green`\n\x3c!-- .element: class="fragment highlight-current-green" --\x3e\n\n- `highlight-current-blue`\n\x3c!-- .element: class="fragment highlight-current-blue" --\x3e\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n### Mutiple fragments\n\nMultiple fragments can be applied to the same element sequentially by wrapping it\n\n<span class="fragment fade-in">\n  <span class="fragment highlight-red">\n    <span class="fragment fade-out">\n      Fade in > Turn red > Fade out\n    </span>\n  </span>\n</span>\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Fragment\n\n### Order\n\nOrder can be changed using the `data-fragment-index` attribute.\n\nMultiple elements can appear at the same index.\n\n- Appears last\n\x3c!-- .element: class="fragment" data-fragment-index="3"--\x3e\n\n- Appears second\n\x3c!-- .element: class="fragment" data-fragment-index="2"--\x3e\n\n\x3c!-- list break --\x3e\n\n- Appears first\n\x3c!-- .element: class="fragment" data-fragment-index="1"--\x3e\n\n- Appears second\n\x3c!-- .element: class="fragment" data-fragment-index="2"--\x3e\n\n---\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Transition\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Transition\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\nTransition can be changed by setting the `transition` config option globally or `data-transition` attribute on specific slide.\n\nPossible values:\n\n- none\n- fade\n- slide\n\n\x3c!-- list break --\x3e\n\n- convex\n- concave\n- zoom\n\n--\n\n\x3c!-- .slide: data-auto-animate --\x3e\n\n## Transition\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n### Auto animate\n\n`data-auto-animate` can be added on nearby slides to make an animation on unchanged elements.\n\n---\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Functions\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Functions\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n### Code\n\nBy enabling `highlight` plugin, you can highlight code blocks.\n\nYou can use `[a-b|c-d]` syntax to highlight lines by steps.\n\n```js [1-2|3|4]\nlet a = 1;\nlet b = 2;\nlet c = (x) => 1 + 2 + x;\nc(3);\n```\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Functions\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n### Overview\n\nPress `Esc` or `O` to enter overview mode when the presentation is active\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Functions\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n### Full Screen\n\nPress `F` or `F11` to enter fullscreen when the presentation is active\n\n--\n\n\x3c!-- .slide: data-transition="slide" data-auto-animate --\x3e\n\n## Functions\n\n\x3c!-- .element: class="r-fit-text" --\x3e\n\n### Zoom\n\nHold down the `alt` key (`ctrl` in Linux) and click on any element to zoom towards it.\n\nClick again to zoom back out.\n'}},s=Object(a.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("Presentation",{key:"presentation_1a96284b",attrs:{id:"presentation_1a96284b",code:this.$dataBlock.presentation_1a96284b,theme:"auto"}})],1)}),[],!1,null,null,null);"function"==typeof i&&i(s);e.default=s.exports}}]);